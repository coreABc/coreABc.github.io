{"title":"排序算法","uid":"557c3a65716469700d953ea750417d1a","slug":"排序算法","date":"2024-09-22T07:39:25.198Z","updated":"2024-09-28T15:06:51.511Z","comments":true,"path":"api/articles/排序算法.json","keywords":null,"cover":"img/2.png","content":"<h2 id=\"十大排序算法\"><a href=\"#十大排序算法\" class=\"headerlink\" title=\"十大排序算法\"></a>十大排序算法</h2><p>排序算法可以分为<strong>内部排序</strong>和<strong>外部排序</strong>，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：<strong>插入排序</strong>、<strong>希尔排序</strong>、<strong>选择排序</strong>、<strong>冒泡排序</strong>、<strong>归并排序</strong>、<strong>快速排序</strong>、<strong>堆排序</strong>、<strong>基数排序</strong>等。</p>\n<p>比较排序：冒泡排序、选择排序、插入排序、归并排序、堆排序、快速排序</p>\n<p>非比较排序：计数排序、基数排序、桶排序</p>\n<p><img src=\"D:\\Me\\blog\\pic\\sort.png\" alt=\"img\"></p>\n<h4 id=\"关于时间复杂度\"><a href=\"#关于时间复杂度\" class=\"headerlink\" title=\"关于时间复杂度\"></a>关于时间复杂度</h4><p>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</p>\n<p>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；</p>\n<p>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序</p>\n<p>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</p>\n<p>关于稳定性</p>\n<p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</p>\n<p>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p>\n<p>名词解释：</p>\n<ul>\n<li>n：数据规模</li>\n<li>k：”桶”的个数</li>\n<li>In-place：占用常数内存，不占用额外内存</li>\n<li>Out-place：占用额外内存</li>\n<li>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</li>\n</ul>\n<h3 id=\"1、快速排序\"><a href=\"#1、快速排序\" class=\"headerlink\" title=\"1、快速排序\"></a>1、快速排序</h3><p>时间复杂度为 O(nlogn)，空间复杂度为 n(logn)</p>\n<p><em>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</em></p>\n<p><img src=\"D:\\Me\\blog\\pic\\quickSort.gif\" alt=\"img\"></p>\n<h4 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h4><ol>\n<li>从数列中挑出一个元素，称为 “基准”（pivot）;</li>\n<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>\n<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序</li>\n</ol>\n<h4 id=\"python代码\"><a href=\"#python代码\" class=\"headerlink\" title=\"python代码\"></a>python代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quickSort</span>(<span class=\"params\">arr, left=<span class=\"literal\">None</span>, right=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    left = <span class=\"number\">0</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(left,(<span class=\"built_in\">int</span>, <span class=\"built_in\">float</span>)) <span class=\"keyword\">else</span> left</span><br><span class=\"line\">    right = <span class=\"built_in\">len</span>(arr)-<span class=\"number\">1</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(right,(<span class=\"built_in\">int</span>, <span class=\"built_in\">float</span>)) <span class=\"keyword\">else</span> right</span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        partitionIndex = partition(arr, left, right)</span><br><span class=\"line\">        quickSort(arr, left, partitionIndex-<span class=\"number\">1</span>)</span><br><span class=\"line\">        quickSort(arr, partitionIndex+<span class=\"number\">1</span>, right)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">partition</span>(<span class=\"params\">arr, left, right</span>):</span><br><span class=\"line\">    <span class=\"comment\">#基点开始定义为数列左节点</span></span><br><span class=\"line\">    pivot = left</span><br><span class=\"line\">    index = pivot+<span class=\"number\">1</span></span><br><span class=\"line\">    i = index</span><br><span class=\"line\">    <span class=\"keyword\">while</span>  i &lt;= right:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> arr[i] &lt; arr[pivot]:</span><br><span class=\"line\">            <span class=\"comment\">#用遍历点和位置点交换比基点小的点，</span></span><br><span class=\"line\">            swap(arr, i, index)</span><br><span class=\"line\">            index+=<span class=\"number\">1</span></span><br><span class=\"line\">        i+=<span class=\"number\">1</span></span><br><span class=\"line\">    swap(arr,pivot,index-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">swap</span>(<span class=\"params\">arr, i, j</span>):</span><br><span class=\"line\">    arr[i], arr[j] = arr[j], arr[i]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"java代码\"><a href=\"#java代码\" class=\"headerlink\" title=\"java代码\"></a>java代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QuickSort</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IArraySort</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] sort(<span class=\"type\">int</span>[] sourceArray) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> quickSort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>[] quickSort(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">partitionIndex</span> <span class=\"operator\">=</span> partition(arr, left, right);</span><br><span class=\"line\">            quickSort(arr, left, partitionIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">            quickSort(arr, partitionIndex + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设定基准值（pivot）</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> left;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> index; i &lt;= right; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class=\"line\">                swap(arr, i, index);</span><br><span class=\"line\">                index++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, pivot, index - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">        arr[i] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2、冒泡排序\"><a href=\"#2、冒泡排序\" class=\"headerlink\" title=\"2、冒泡排序\"></a>2、冒泡排序</h3><p>时间复杂度O(n^2^) ， 空间复杂度n(1)，正序数组最快，反序数组最慢</p>\n<h4 id=\"算法步骤-1\"><a href=\"#算法步骤-1\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h4><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p>\n<p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p>\n<p>针对所有的元素重复以上的步骤，除了最后一个。</p>\n<p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>\n<h4 id=\"动图演示\"><a href=\"#动图演示\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h4><p><img src=\"D:\\Me\\blog\\pic\\bubbleSort.gif\" alt=\"img\"></p>\n<h4 id=\"java代码-1\"><a href=\"#java代码-1\" class=\"headerlink\" title=\"java代码\"></a>java代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSort</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IArraySort</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] sort(<span class=\"type\">int</span>[] sourceArray) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j + <span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">                    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"python代码-1\"><a href=\"#python代码-1\" class=\"headerlink\" title=\"python代码\"></a>python代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubbleSort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(arr)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(arr)-i):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> arr[j] &gt; arr[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                arr[j], arr[j + <span class=\"number\">1</span>] = arr[j + <span class=\"number\">1</span>], arr[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3、选择排序\"><a href=\"#3、选择排序\" class=\"headerlink\" title=\"3、选择排序\"></a>3、选择排序</h3><p>时间复杂度O(n^2^)，空间复杂度n(1)</p>\n<h4 id=\"算法步骤-2\"><a href=\"#算法步骤-2\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h4><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p>\n<p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p>\n<p>重复第二步，直到所有元素均排序完毕。</p>\n<h4 id=\"动图演示-1\"><a href=\"#动图演示-1\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h4><p><img src=\"D:\\Me\\blog\\pic\\selectionSort.gif\" alt=\"img\"></p>\n<h4 id=\"java代码-2\"><a href=\"#java代码-2\" class=\"headerlink\" title=\"java代码\"></a>java代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectionSort</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IArraySort</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] sort(<span class=\"type\">int</span>[] sourceArray) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 总共要经过 N-1 轮比较</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 每轮需要比较的次数 N-i</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j\t] &lt; arr[min]) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 记录目前能找到的最小值元素的下标</span></span><br><span class=\"line\">                    min = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将找到的最小值和i位置所在的值进行交换</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != min) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">                arr[i] = arr[min];</span><br><span class=\"line\">                arr[min] = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"python代码-2\"><a href=\"#python代码-2\" class=\"headerlink\" title=\"python代码\"></a>python代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">selectionSort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> r\tange(<span class=\"built_in\">len</span>(arr) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 记录最小数的索引</span></span><br><span class=\"line\">        minIndex = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(arr)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> arr[j] &lt; arr[minIndex]:</span><br><span class=\"line\">                minIndex = j</span><br><span class=\"line\">        <span class=\"comment\"># i 不是最小数时，将 i 和最小数进行交换</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i != minIndex:</span><br><span class=\"line\">            arr[i], arr[minIndex] = arr[minIndex], arr[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4、插入排序\"><a href=\"#4、插入排序\" class=\"headerlink\" title=\"4、插入排序\"></a>4、插入排序</h3><p>时间复杂度O(n^2^)，空间复杂度n(1)</p>\n<h4 id=\"动图演示-2\"><a href=\"#动图演示-2\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h4><p><img src=\"D:\\Me\\blog\\pic\\insertionSort.gif\" alt=\"img\"></p>\n<h4 id=\"算法步骤-3\"><a href=\"#算法步骤-3\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h4><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p>\n<p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InsertSort</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IArraySort</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] sort(<span class=\"type\">int</span>[] sourceArray) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 记录要插入的数据</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 从已经排序的序列最右边的开始比较，找到比其小的数</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; tmp &lt; arr[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 存在比其小的数，插入</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j != i) &#123;</span><br><span class=\"line\">                arr[j] = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"python代码-3\"><a href=\"#python代码-3\" class=\"headerlink\" title=\"python代码\"></a>python代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insertionSort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(arr)):</span><br><span class=\"line\">        preIndex = i-<span class=\"number\">1</span></span><br><span class=\"line\">        current = arr[i]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> preIndex &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> arr[preIndex] &gt; current:</span><br><span class=\"line\">            arr[preIndex+<span class=\"number\">1</span>] = arr[preIndex]</span><br><span class=\"line\">            preIndex-=<span class=\"number\">1</span></span><br><span class=\"line\">        arr[preIndex+<span class=\"number\">1</span>] = current</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5、希尔排序\"><a href=\"#5、希尔排序\" class=\"headerlink\" title=\"5、希尔排序\"></a>5、希尔排序</h3><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。</p>\n<h4 id=\"算法步骤-4\"><a href=\"#算法步骤-4\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h4><p>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk &#x3D; 1；</p>\n<p>按增量序列个数 k，对序列进行 k 趟排序；</p>\n<p>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p>\n<h4 id=\"动图演示-3\"><a href=\"#动图演示-3\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h4><p><img src=\"D:\\Me\\blog\\pic\\Sorting_shellsort_anim.gif\" alt=\"img\"></p>\n<h4 id=\"java代码-3\"><a href=\"#java代码-3\" class=\"headerlink\" title=\"java代码\"></a>java代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shellSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> length / <span class=\"number\">2</span>; step &gt;= <span class=\"number\">1</span>; step /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> step; i &lt; length; i++) &#123;</span><br><span class=\"line\">            temp = arr[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - step;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class=\"line\">                arr[j + step] = arr[j];</span><br><span class=\"line\">                j -= step;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + step] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"python代码-4\"><a href=\"#python代码-4\" class=\"headerlink\" title=\"python代码\"></a>python代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">shellSort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    <span class=\"keyword\">import</span> math</span><br><span class=\"line\">    gap=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gap &lt; <span class=\"built_in\">len</span>(arr)/<span class=\"number\">3</span>):</span><br><span class=\"line\">        gap = gap*<span class=\"number\">3</span>+<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> gap &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(gap,<span class=\"built_in\">len</span>(arr)):</span><br><span class=\"line\">            temp = arr[i]</span><br><span class=\"line\">            j = i-gap</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> arr[j] &gt; temp:</span><br><span class=\"line\">                arr[j+gap]=arr[j]</span><br><span class=\"line\">                j-=gap</span><br><span class=\"line\">            arr[j+gap] = temp</span><br><span class=\"line\">        gap = math.floor(gap/<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6、归并排序\"><a href=\"#6、归并排序\" class=\"headerlink\" title=\"6、归并排序\"></a>6、归并排序</h3><p>时间复杂度O(nlogn)，空间复杂度O(n)，out-place</p>\n<p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p>\n<p>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p>\n<ul>\n<li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；</li>\n<li>自下而上的迭代；</li>\n</ul>\n<h4 id=\"算法步骤-5\"><a href=\"#算法步骤-5\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h4><ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\n<li>重复步骤 3 直到某一指针达到序列尾；</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li>\n</ol>\n<h4 id=\"动图演示-4\"><a href=\"#动图演示-4\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h4><p><img src=\"D:\\Me\\blog\\pic\\mergeSort.gif\" alt=\"img\"></p>\n<h4 id=\"java代码-4\"><a href=\"#java代码-4\" class=\"headerlink\" title=\"java代码\"></a>java代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MergeSort</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IArraySort</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] sort(<span class=\"type\">int</span>[] sourceArray) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">middle</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) Math.floor(arr.length / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] left = Arrays.copyOfRange(arr, <span class=\"number\">0</span>, middle);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] right = Arrays.copyOfRange(arr, middle, arr.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge(sort(left), sort(right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">int</span>[] merge(<span class=\"type\">int</span>[] left, <span class=\"type\">int</span>[] right) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[left.length + right.length];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left.length &gt; <span class=\"number\">0</span> &amp;&amp; right.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                result[i++] = left[<span class=\"number\">0</span>];</span><br><span class=\"line\">                left = Arrays.copyOfRange(left, <span class=\"number\">1</span>, left.length);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result[i++] = right[<span class=\"number\">0</span>];</span><br><span class=\"line\">                right = Arrays.copyOfRange(right, <span class=\"number\">1</span>, right.length);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result[i++] = left[<span class=\"number\">0</span>];</span><br><span class=\"line\">            left = Arrays.copyOfRange(left, <span class=\"number\">1</span>, left.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (right.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result[i++] = right[<span class=\"number\">0</span>];</span><br><span class=\"line\">            right = Arrays.copyOfRange(right, <span class=\"number\">1</span>, right.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"python代码-5\"><a href=\"#python代码-5\" class=\"headerlink\" title=\"python代码\"></a>python代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mergeSort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    <span class=\"keyword\">import</span> math</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">len</span>(arr)&lt;<span class=\"number\">2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    middle = math.floor(<span class=\"built_in\">len</span>(arr)/<span class=\"number\">2</span>)</span><br><span class=\"line\">    left, right = arr[<span class=\"number\">0</span>:middle], arr[middle:]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">left,right</span>):</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left <span class=\"keyword\">and</span> right:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            result.append(left.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\">#pop the first one in the list</span></span><br><span class=\"line\">            result.append(right.pop(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left:</span><br><span class=\"line\">        result.append(left.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> right:</span><br><span class=\"line\">        result.append(right.pop(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7、堆排序\"><a href=\"#7、堆排序\" class=\"headerlink\" title=\"7、堆排序\"></a>7、堆排序</h3><p>时间复杂度O(nlogn), O(1)</p>\n<p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p>\n<ol>\n<li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li>\n<li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</li>\n</ol>\n<p><img src=\"D:\\Me\\blog\\pic\\heap.png\" alt=\"image-20230710225426322\"></p>\n<p>堆排序的平均时间复杂度为 Ο(nlogn)。</p>\n<h4 id=\"算法步骤-6\"><a href=\"#算法步骤-6\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h4><ol>\n<li>创建一个堆 H[0……n-1]；</li>\n<li>把堆首（最大值）和堆尾互换；</li>\n<li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li>\n<li>重复步骤 2，直到堆的尺寸为 1。</li>\n</ol>\n<h4 id=\"动图演示-5\"><a href=\"#动图演示-5\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h4><p><img src=\"D:\\Me\\blog\\pic\\heapSort.gif\" alt=\"img\"></p>\n<p><img src=\"D:\\Me\\blog\\pic\\Sorting_heapsort_anim.gif\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeapSort</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IArraySort</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] sort(<span class=\"type\">int</span>[] sourceArray) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        buildMaxHeap(arr, len);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            swap(arr, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">            len--;</span><br><span class=\"line\">            heapify(arr, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildMaxHeap</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) Math.floor(len / <span class=\"number\">2</span>); i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            heapify(arr, i, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">heapify</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> i, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> * i + <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">largest</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class=\"line\">            largest = left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class=\"line\">            largest = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (largest != i) &#123;</span><br><span class=\"line\">            swap(arr, i, largest);</span><br><span class=\"line\">            heapify(arr, largest, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">        arr[i] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">buildMaxHeap</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    <span class=\"keyword\">import</span> math</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(math.floor(<span class=\"built_in\">len</span>(arr)/<span class=\"number\">2</span>),-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">        heapify(arr,i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">heapify</span>(<span class=\"params\">arr, i</span>):</span><br><span class=\"line\">    left = <span class=\"number\">2</span>*i+<span class=\"number\">1</span></span><br><span class=\"line\">    right = <span class=\"number\">2</span>*i+<span class=\"number\">2</span></span><br><span class=\"line\">    largest = i</span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; arrLen <span class=\"keyword\">and</span> arr[left] &gt; arr[largest]:</span><br><span class=\"line\">        largest = left</span><br><span class=\"line\">    <span class=\"keyword\">if</span> right &lt; arrLen <span class=\"keyword\">and</span> arr[right] &gt; arr[largest]:</span><br><span class=\"line\">        largest = right</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> largest != i:</span><br><span class=\"line\">        swap(arr, i, largest)</span><br><span class=\"line\">        heapify(arr, largest)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">swap</span>(<span class=\"params\">arr, i, j</span>):</span><br><span class=\"line\">    arr[i], arr[j] = arr[j], arr[i]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">heapSort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> arrLen</span><br><span class=\"line\">    arrLen = <span class=\"built_in\">len</span>(arr)</span><br><span class=\"line\">    buildMaxHeap(arr)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(arr)-<span class=\"number\">1</span>,<span class=\"number\">0</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">        swap(arr,<span class=\"number\">0</span>,i)</span><br><span class=\"line\">        arrLen -=<span class=\"number\">1</span></span><br><span class=\"line\">        heapify(arr, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n\n","feature":true,"text":"十大排序算法排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访...","permalink":"/post/排序算法","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"算法","slug":"算法","count":1,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">十大排序算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">关于时间复杂度</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">1、快速排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">算法步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">python代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#java%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">java代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">2、冒泡排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4-1\"><span class=\"toc-text\">算法步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E5%9B%BE%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">动图演示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#java%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">java代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">python代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">3、选择排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4-2\"><span class=\"toc-text\">算法步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E5%9B%BE%E6%BC%94%E7%A4%BA-1\"><span class=\"toc-text\">动图演示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#java%E4%BB%A3%E7%A0%81-2\"><span class=\"toc-text\">java代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python%E4%BB%A3%E7%A0%81-2\"><span class=\"toc-text\">python代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">4、插入排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E5%9B%BE%E6%BC%94%E7%A4%BA-2\"><span class=\"toc-text\">动图演示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4-3\"><span class=\"toc-text\">算法步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python%E4%BB%A3%E7%A0%81-3\"><span class=\"toc-text\">python代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">5、希尔排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4-4\"><span class=\"toc-text\">算法步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E5%9B%BE%E6%BC%94%E7%A4%BA-3\"><span class=\"toc-text\">动图演示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#java%E4%BB%A3%E7%A0%81-3\"><span class=\"toc-text\">java代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python%E4%BB%A3%E7%A0%81-4\"><span class=\"toc-text\">python代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">6、归并排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4-5\"><span class=\"toc-text\">算法步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E5%9B%BE%E6%BC%94%E7%A4%BA-4\"><span class=\"toc-text\">动图演示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#java%E4%BB%A3%E7%A0%81-4\"><span class=\"toc-text\">java代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python%E4%BB%A3%E7%A0%81-5\"><span class=\"toc-text\">python代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81%E5%A0%86%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">7、堆排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4-6\"><span class=\"toc-text\">算法步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E5%9B%BE%E6%BC%94%E7%A4%BA-5\"><span class=\"toc-text\">动图演示</span></a></li></ol></li></ol></li></ol>","author":{"name":"麟","slug":"blog-author","avatar":"/images/ava.jpeg","link":"/","description":"开始，是结束的开始","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"正则表达式","uid":"03a1af7058cec8bb8efe418ed228e157","slug":"正则表达式","date":"2024-09-22T07:39:25.198Z","updated":"2024-09-22T07:39:25.198Z","comments":true,"path":"api/articles/正则表达式.json","keywords":null,"cover":"img/3.png","text":"正则表达式-语法正则表达式是一种有字符和特殊字符组成的模式，用于描述被匹配的文本模式。正则表达式可以在文本中替换、查找、提取和验证特定的模式。 普通字符普通字符...","permalink":"/post/正则表达式","photos":[],"count_time":{"symbolsCount":477,"symbolsTime":"1 mins."},"categories":[{"name":"正则","slug":"正则","count":1,"path":"api/categories/正则.json"}],"tags":[{"name":"正则","slug":"正则","count":1,"path":"api/tags/正则.json"}],"author":{"name":"麟","slug":"blog-author","avatar":"/images/ava.jpeg","link":"/","description":"开始，是结束的开始","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Tensorflow环境安装的问题","uid":"75013197abd18a8eb6035239da3363f3","slug":"Tensorflow安装踩的坑","date":"2024-09-22T07:39:25.197Z","updated":"2024-09-22T07:39:25.197Z","comments":true,"path":"api/articles/Tensorflow安装踩的坑.json","keywords":null,"cover":null,"text":"Tensorflow安装踩的坑 环境 tensorflow-cpu==2.x tensorflow==2.x 只有GPU cpu运行 cpu运行 有GPU且安装...","permalink":"/post/Tensorflow安装踩的坑","photos":[],"count_time":{"symbolsCount":298,"symbolsTime":"1 mins."},"categories":[{"name":"深度学习","slug":"深度学习","count":3,"path":"api/categories/深度学习.json"}],"tags":[{"name":"Tensorflow","slug":"Tensorflow","count":1,"path":"api/tags/Tensorflow.json"}],"author":{"name":"麟","slug":"blog-author","avatar":"/images/ava.jpeg","link":"/","description":"开始，是结束的开始","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}