{"title":"VGG16深度学习框架","uid":"b8515575cf4c927344ce80d4d1dec162","slug":"VGG学习","date":"2024-09-22T07:39:25.197Z","updated":"2024-09-22T07:39:25.197Z","comments":true,"path":"api/articles/VGG学习.json","keywords":null,"cover":[],"content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from keras.applications.vgg16 import VGG16</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载VGG16模型，下载地址为 c:\\user(用户)\\.keras\\models\\vgg16_weights_tf_dim_ordering_tf_kernels.h5</span><br><span class=\"line\">model = VGG16(weights=&#x27;imagenet&#x27;, include_top=False)</span><br><span class=\"line\"># 显示模型结构</span><br><span class=\"line\">model.summary()</span><br></pre></td></tr></table></figure>\n\n<p>可以使用<code>keras.applications 模块</code>进行导入<br>重要参数：</p>\n<ul>\n<li><code>include_top </code>：是否包含顶端的全连接层</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>include_top</code>的作用：</p>\n<p>这些模型中的大多数是一系列卷积层，后跟一个或几个密集（或完全连接）层。</p>\n<p><code>Include_top</code>允许您选择是否需要最终的密集层。</p>\n<ul>\n<li>卷积层用作特征提取器。它们识别图像中的一系列图案，每一层都可以通过查看图案的图案来识别更复杂的图案。</li>\n<li>密集层能够解释发现的模式以进行分类：此图像包含猫、狗、汽车等。</li>\n</ul>\n<p>关于权重：</p>\n<ul>\n<li>卷积层中的权重是固定大小的。它们是内核 x 过滤器的大小。示例：包含 3 个筛选器的 3x10 内核。卷积层不关心输入图像的大小。它只是进行卷积，并根据输入图像的大小呈现结果图像。（如果不清楚，请搜索一些关于卷积的图解教程）</li>\n<li>现在，密集层中的权重完全取决于输入大小。它是输入的每个元素一个权重。因此，这要求你的输入始终是相同的大小，否则你将没有适当的学习权重。</li>\n</ul>\n<p>因此，删除最终的密集层允许您定义输入大小（请参阅文档中）。（输出大小将相应增加&#x2F;减少）。</p>\n<p>但是您将丢失解释&#x2F;分类图层。（您可以添加自己的任务，具体取决于您的任务）</p></blockquote>\n<ul>\n<li><code>weight</code>：None代表随机，<code>imagenet</code>初始化，代表加载在ImageNet上预训练的权值</li>\n<li><code>input_tensor</code>：可选，Keras张量作为模型的输入（即layers.Input()输出的tensor）。</li>\n<li><code>input_shape</code>：可选，输入尺寸元组，当仅include_top&#x3D;False时有效值（否则输入形状必须是(299, 299, 3)，因为预训练模型是以这个大小训练的）它必须拥有3个输入通道，且宽高必须不小于71例如。(150, 150, 3)是一个合法的输入尺寸。</li>\n<li>pooling：可选，当include_top为False时，该参数指定了特征提取时的池化方式。<ul>\n<li>None 代表不池化，直接输出最后一层卷积层的输出，该输出是一个4D张量。</li>\n<li>‘avg’ 代表平均值平均池化（GlobalAveragePooling2D），相当于在最后一层卷积层后面再加一层平均池化层，输出是一个2D张量。</li>\n<li>‘max’ 代表最大池化。</li>\n</ul>\n</li>\n<li><code>classes</code>：可选，图片分类的类别数，仅当include_top为和True不加载预训练权值时可用。</li>\n</ul>\n<h3 id=\"构建完整的模型\"><a href=\"#构建完整的模型\" class=\"headerlink\" title=\"构建完整的模型\"></a>构建完整的模型</h3><p>构建序列模型 &#x3D;&#x3D;&gt; 添加VGG16模型（输入） &#x3D;&#x3D;&gt; 添加全局平均化层 &#x3D;&#x3D;&gt; 添加全连接层（输出）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建模型，增加全连接层</span></span><br><span class=\"line\">model = keras.Sequential()</span><br><span class=\"line\">model.add(conv_base)</span><br><span class=\"line\">model.add(keras.layers.GlobalAveragePooling2D())</span><br><span class=\"line\">model.add(keras.layers.Dense(<span class=\"number\">512</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>))</span><br><span class=\"line\">model.add(keras.layers.Dense(<span class=\"number\">1</span>, activation=<span class=\"string\">&#x27;sigmoid’))</span></span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf.keras.layers.Dense(</span><br><span class=\"line\">    units,                                 <span class=\"comment\"># 正整数，输出空间的维数</span></span><br><span class=\"line\">    activation=<span class=\"literal\">None</span>,                       <span class=\"comment\"># 激活函数，不指定则没有</span></span><br><span class=\"line\">    use_bias=<span class=\"literal\">True</span>,\t\t\t\t\t\t   <span class=\"comment\"># 布尔值，是否使用偏移向量</span></span><br><span class=\"line\">    kernel_initializer=<span class=\"string\">&#x27;glorot_uniform&#x27;</span>,   <span class=\"comment\"># 核权重矩阵的初始值设定项</span></span><br><span class=\"line\">    bias_initializer=<span class=\"string\">&#x27;zeros&#x27;</span>,              <span class=\"comment\"># 偏差向量的初始值设定项</span></span><br><span class=\"line\">    kernel_regularizer=<span class=\"literal\">None</span>,               <span class=\"comment\"># 正则化函数应用于核权矩阵</span></span><br><span class=\"line\">    bias_regularizer=<span class=\"literal\">None</span>,                 <span class=\"comment\"># 应用于偏差向量的正则化函数</span></span><br><span class=\"line\">    activity_regularizer=<span class=\"literal\">None</span>,             <span class=\"comment\"># Regularizer function applied to the output of the layer (its &quot;activation&quot;)</span></span><br><span class=\"line\">    kernel_constraint=<span class=\"literal\">None</span>,                <span class=\"comment\"># Constraint function applied to the kernel weights matrix.</span></span><br><span class=\"line\">    bias_constraint=<span class=\"literal\">None</span>, **kwargs         <span class=\"comment\"># Constraint function applied to the bias vector</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></blockquote>\n<p><code>keras.Sequential()</code>：建立 Sequential 模型，Sequential 是 Keras 中的一种神经网络框架，可以被认为是一个容器，其中封装了神经网络的结构。Sequential 模型只有一组输入和一组输出。各层之间按照先后顺序进行堆叠。前面一层的输出就是后面一次的输入。通过不同层的堆叠，构建出神经网络。</p>\n<p><code>GlobalAveragePooling2D()</code>：是平均池化的一个特例，它不需要指定pool_size和strides等参数，操作的实质是将输入特征图的每一个通道求平均得到一个数值。它的输入和输出维度为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input shape:</span><br><span class=\"line\">    - If `data_format=<span class=\"string\">&#x27;channels_last&#x27;</span>`:</span><br><span class=\"line\">        4D tensor <span class=\"keyword\">with</span> shape:</span><br><span class=\"line\">        `(batch_size, rows, cols, channels)`</span><br><span class=\"line\">    - If `data_format=<span class=\"string\">&#x27;channels_first&#x27;</span>`:</span><br><span class=\"line\">        4D tensor <span class=\"keyword\">with</span> shape:</span><br><span class=\"line\">        `(batch_size, channels, rows, cols)`</span><br><span class=\"line\"></span><br><span class=\"line\">Output shape:</span><br><span class=\"line\">    2D tensor <span class=\"keyword\">with</span> shape:</span><br><span class=\"line\">    `(batch_size, channels)`</span><br></pre></td></tr></table></figure>\n\n<p><code>activation</code>：激活函数，无则没有</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>激活函数</strong></p>\n<p>激活函数（Activation Function）是一种添加到人工神经网络中的函数，旨在帮助网络学习数据中的复杂模式。在神经元中，输入的input经过一系列加权求和后作用于另一个函数，这个函数就是这里的激活函数。类似于人类大脑中基于神经元的模型，激活函数最终决定了是否传递信号以及要发射给下一个神经元的内容。在人工神经网络中，一个节点的激活函数定义了该节点在给定的输入或输入集合下的输出。</p>\n<p>激活函数可以分为<strong>线性激活函数</strong>（线性方程控制输入到输出的映射，如f(x)&#x3D;x等）以及<strong>非线性激活函数</strong>（非线性方程控制输入到输出的映射，比如Sigmoid、Tanh、ReLU、LReLU、PReLU、Swish 等）</p>\n<blockquote>\n<p><strong>为什么要使用激活函数</strong></p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>因为神经网络中每一层的输入输出都是一个线性求和的过程，下一层的输出只是承接了上一层输入函数的线性变换，所以如果没有激活函数，那么无论你构造的神经网络多么复杂，有多少层，最后的输出都是输入的线性组合，纯粹的线性组合并不能够解决更为复杂的问题。而引入激活函数之后，我们会发现常见的激活函数都是非线性的，因此也会给神经元引入非线性元素，使得神经网络可以逼近其他的任何非线性函数，这样可以使得神经网络应用到更多非线性模型中。</p></blockquote>\n<img src=\"https://pic1.zhimg.com/v2-91e1b17ef9b61256739749feff3cea10_r.jpg\" alt=\"img\" style=\"zoom: 80%;\" />\n\n<p><strong>常见的激活函数</strong>：</p>\n<ol>\n<li><strong>sigmoid函数</strong></li>\n</ol>\n<p>Sigmoid函数也叫Logistic函数，用于隐层神经元输出，取值范围为(0,1)，它可以将一个实数映射到(0,1)的区间，可以用来做二分类。在特征相差比较复杂或是相差不是特别大时效果比较好。sigmoid是一个十分常见的激活函数，函数的表达式如下：</p>\n<p>​\t<br>$$<br>f(x)&#x3D;\\frac{1}{1+e^x}<br>$$<br><strong>在什么情况下适合使用 Sigmoid 激活函数呢？</strong></p>\n<ul>\n<li>Sigmoid 函数的输出范围是 0 到 1。由于输出值限定在 0 到1，因此它对每个神经元的输出进行了归一化；</li>\n<li>用于将预测概率作为输出的模型。由于概率的取值范围是 0 到 1，因此 Sigmoid 函数非常合适；</li>\n<li>梯度平滑，避免「跳跃」的输出值；</li>\n<li>函数是可微的。这意味着可以找到任意两个点的 sigmoid 曲线的斜率；</li>\n<li>明确的预测，即非常接近 1 或 0。</li>\n</ul>\n<p><strong>Sigmoid 激活函数存在的不足：</strong></p>\n<ul>\n<li><strong>梯度消失</strong>：注意：Sigmoid 函数趋近 0 和 1 的时候变化率会变得平坦，也就是说，Sigmoid 的梯度趋近于 0。神经网络使用 Sigmoid 激活函数进行反向传播时，输出接近 0 或 1 的神经元其梯度趋近于 0。这些神经元叫作饱和神经元。因此，这些神经元的权重不会更新。此外，与此类神经元相连的神经元的权重也更新得很慢。该问题叫作梯度消失。因此，想象一下，如果一个大型神经网络包含 Sigmoid 神经元，而其中很多个都处于饱和状态，那么该网络无法执行反向传播。</li>\n<li><strong>不以零为中心</strong>：Sigmoid 输出不以零为中心的,，输出恒大于0，非零中心化的输出会使得其后一层的神经元的输入发生偏置偏移（Bias Shift），并进一步使得梯度下降的收敛速度变慢。</li>\n<li><strong>计算成本高昂</strong>：exp() 函数与其他非线性激活函数相比，计算成本高昂，计算机运行起来速度较慢。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>ReLU激活函数</strong></li>\n</ol>\n<p>ReLU函数又称为修正线性单元（Rectified Linear Unit），是一种分段线性函数，其弥补了sigmoid函数以及tanh函数的梯度消失问题，在目前的深度神经网络中被广泛使用。ReLU函数本质上是一个斜坡（ramp）函数，公式及函数图像如下：<br>$$<br>f(x)&#x3D;\\begin{cases}<br>x, x\\geqslant0\\<br>0, x\\leqslant0<br>\\end{cases}&#x3D;max(0,x)<br>$$</p>\n<p><strong>全连接层的作用</strong></p>\n<p>全连接层在整个网络卷积神经网络中起到“特征提取器”的作用。如果说卷积层、池化层和激活函数等操作是将原始数据映射到隐层特征空间的话，全连接层则起到将学到的特征表示映射到样本的标记空间的作用。</p>\n<p>一段来自知乎的通俗理解：</p>\n<p>从卷积网络谈起，卷积网络在形式上有一点点像咱们正在召开的“人民代表大会”。卷积核的个数相当于候选人，图像中不同的特征会激活不同的“候选人”（卷积核）。池化层（仅指最大池化）起着类似于“合票”的作用，不同特征在对不同的“候选人”有着各自的喜好。</p>\n<p>全连接相当于是“代表普选”。所有被各个区域选出的代表，对最终结果进行“投票”，全连接保证了receiptive field 是整个图像，既图像中各个部分（所谓所有代表），都有对最终结果影响的权利。</p>\n<p><strong>全连接层的原理</strong></p>\n<p>在卷积神经网络的最后，往往会出现一两层全连接层，全连接一般会把卷积输出的二维特征图转化成一维的一个向量，这是怎么来的呢？目的何在呢？</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210413094056578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjUxNjE2,size_16,color_FFFFFF,t_70#pic_center\" alt=\"img\"></p>\n<p>最后的两列小圆球就是两个全连接层的输出，在最后一层卷积结束后，进行了最后一次池化，得到20个12*12的图像，经过全连接层变成了1*100的向量，再次经过一次全连接层变成的1*10的向量输出。</p>\n<p>从第一步是如何到达第三步的呢，其实就是有20*100个12*12的不同卷积核卷积出来的，我们也可以这样想，就是每个神经元的输出是12*12*20个输入值与对应的权值乘积的和。对于输入的每一张图，用了一个和图像一样大小的核卷积，这样整幅图就变成了一个数了，如果厚度是20就是那20个核卷积完了之后相加求和。这样就能把一张图高度浓缩成一个数了。</p>\n</blockquote>\n<h3 id=\"模型的初步训练\"><a href=\"#模型的初步训练\" class=\"headerlink\" title=\"模型的初步训练\"></a>模型的初步训练</h3><h4 id=\"训练步骤\"><a href=\"#训练步骤\" class=\"headerlink\" title=\"训练步骤\"></a>训练步骤</h4><ol>\n<li>在预训练卷积上添加自定义层</li>\n<li>使用<code>conv_base.trainable = False</code>冻结卷积基所有层</li>\n<li>训练添加的分类层</li>\n<li>解冻卷积基的一部分层</li>\n<li>联合训练解冻的卷积层和添加的自定义层</li>\n</ol>\n<p>在初步训练中要<strong>锁定</strong>卷积基的参数值，因为我们自己加入的全连接层的参数是随机初始化的，在初步训练中会影响卷积基的参数，导致降低准确率。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conv_base.trainable = <span class=\"literal\">False</span>  <span class=\"comment\"># 使得VGG卷积中的参数不可训练</span></span><br><span class=\"line\"><span class=\"comment\"># 因为在训练模型是，最后的两层全连接层是随机初始化的参数，有可能会影响到VGG16卷积层的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优化模型</span></span><br><span class=\"line\">model.<span class=\"built_in\">compile</span>(optimizer=keras.optimizers.Adam(lr=<span class=\"number\">0.001</span>),</span><br><span class=\"line\">             loss=<span class=\"string\">&#x27;binary_crossentropy&#x27;</span>,</span><br><span class=\"line\">             metrics=[<span class=\"string\">&#x27;acc’])</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 进行训练</span></span><br><span class=\"line\"><span class=\"string\">history = model.fit(    train_image_ds,</span></span><br><span class=\"line\"><span class=\"string\">                        steps_per_epoch=train_count//BATCH_SIZE,</span></span><br><span class=\"line\"><span class=\"string\">                        epochs=5,</span></span><br><span class=\"line\"><span class=\"string\">                        validation_data=test_image_ds,</span></span><br><span class=\"line\"><span class=\"string\">                        validation_steps=test_count//BATCH_SIZE</span></span><br><span class=\"line\"><span class=\"string\">                    )</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt;Train for 62 steps, validate for 31 steps</span></span><br><span class=\"line\"><span class=\"string\">Epoch 1/5</span></span><br><span class=\"line\"><span class=\"string\">62/62 [==============================] - 407s 7s/step - loss: 0.6301 - acc: 0.6190 - val_loss: 0.5986 - val_acc: 0.6552</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>model.compile(optimizer &#x3D; 优化器，</strong></p>\n<p>​            <strong>loss &#x3D; 损失函数，</strong></p>\n<p>​            <strong>metrics &#x3D; [“准确率”])</strong></p>\n<p>其中：</p>\n<p><strong>optimizer</strong>可以是字符串形式给出的优化器名字，也可以是函数形式，使用函数形式可以设置学习率、动量和超参数</p>\n<p>例如：<code>sgd</code>或者<code>tf.optimizers.SGD(lr=学习率,decay=学习衰减率,momentum=动量参数)</code></p>\n<p><code>adagrad</code>或者<code>tf.keras.optimizers.Adagrad(lr=学习率,decay=学习衰减率)</code></p>\n<p><code>adadelta</code>或者<code> tf.keras.optimizers.Adadelta(lr=学习率,decay=学习衰减率)</code></p>\n<p><code>adam</code>或者<code>  tf.keras.optimizers.Adam(lr=学习率,decay=学习衰减率)</code></p>\n<p><strong>loss</strong>可以是字符串形式给出的损失函数的名字，也可以是函数形式</p>\n<p>例如：<code>msc</code>或者<code>tf.keras.losses.MeanSquaredError()</code></p>\n<p><code>sparse_categorical_crossentropy</code> 或者<code> tf.keras.losses.SparseCatagoricalCrossentropy(from_logits = False)</code>损失函数经常需要使用softmax函数来将输出转化为概率分布的形式，在这里from_logits代表是否将输出转为概率分布的形式，为False时表示转换为概率分布，为True时表示不转换，直接输出</p>\n<p><strong>Metrics标注网络评价指标</strong></p>\n<p>例如：<code>accuracy</code>：y_ 和 y 都是数值，如y_ &#x3D; [1] y &#x3D; [1] #y_为真实值，y为预测值</p>\n<p><code>sparse_accuracy</code>：y_和y都是以独热码 和概率分布表示，如y_ &#x3D; [0, 1, 0], y &#x3D; [0.256, 0.695, 0.048]</p>\n<p><code>sparse_categorical_accuracy</code>：y_是以数值形式给出，y是以独热码给出，如y_ &#x3D; [1], y &#x3D; [0.256 0.695, 0.048]</p></blockquote>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMub3NjaGluYS5uZXQvdXBsb2Fkcy9zcGFjZS8yMDE4LzAzMTQvMDIzMDQ0X1g0OVJfODc2MzU0LnBuZw?x-oss-process=image/format,png\" alt=\"img\"></p>\n<p>1、输入224x224x3的图片，经64个3x3的卷积核作两次卷积+ReLU，卷积后的尺寸变为224x224x64<br>2、作max pooling（最大化池化），池化单元尺寸为2x2（效果为图像尺寸减半），池化后的尺寸变为112x112x64<br>3、经128个3x3的卷积核作两次卷积+ReLU，尺寸变为112x112x128<br>4、作2x2的max pooling池化，尺寸变为56x56x128<br>5、经256个3x3的卷积核作三次卷积+ReLU，尺寸变为56x56x256<br>6、作2x2的max pooling池化，尺寸变为28x28x256<br>7、经512个3x3的卷积核作三次卷积+ReLU，尺寸变为28x28x512<br>8、作2x2的max pooling池化，尺寸变为14x14x512<br>9、经512个3x3的卷积核作三次卷积+ReLU，尺寸变为14x14x512<br>10、作2x2的max pooling池化，尺寸变为7x7x512<br>11、与两层1x1x4096，一层1x1x1000进行全连接+ReLU（共三层）<br>12、通过softmax输出1000个预测结果</p>\n","text":"123456from keras.applications.vgg16 import VGG16# 下载VGG16模型，下载地址为 c:\\user(用户)\\.k...","permalink":"/post/VGG学习","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"深度学习","slug":"深度学习","count":3,"path":"api/categories/深度学习.json"}],"tags":[{"name":"VGG16","slug":"VGG16","count":1,"path":"api/tags/VGG16.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">构建完整的模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%88%9D%E6%AD%A5%E8%AE%AD%E7%BB%83\"><span class=\"toc-text\">模型的初步训练</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%AD%E7%BB%83%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">训练步骤</span></a></li></ol></li></ol>","author":{"name":"nly","slug":"blog-author","avatar":"","link":"/","description":"收集者","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"深度学习数据集","uid":"43844437b44d7679c1c7503d8f669d76","slug":"CIFAR-10使用简介","date":"2024-09-22T07:39:25.197Z","updated":"2024-09-22T07:39:25.197Z","comments":true,"path":"api/articles/CIFAR-10使用简介.json","keywords":null,"cover":[],"text":"CIFAR-10使用简介 CIFAR-10是一个更接近普适物体的彩色图像数据集。CIFAR-10 是由Hinton 的学生Alex Krizhevsky 和Il...","permalink":"/post/CIFAR-10使用简介","photos":[],"count_time":{"symbolsCount":527,"symbolsTime":"1 mins."},"categories":[{"name":"深度学习数据","slug":"深度学习数据","count":1,"path":"api/categories/深度学习数据.json"}],"tags":[{"name":"数据集","slug":"数据集","count":1,"path":"api/tags/数据集.json"}],"author":{"name":"nly","slug":"blog-author","avatar":"","link":"/","description":"收集者","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"卷积神经网络","uid":"665540b83d48c62e220c6e1d58a9965e","slug":"卷积神经网络CNN","date":"2024-09-22T07:39:25.197Z","updated":"2024-09-22T07:39:25.197Z","comments":true,"path":"api/articles/卷积神经网络CNN.json","keywords":null,"cover":"img/1.jpg","text":"卷积神经网络CNN 在计算机中图像由像素点组成，通过逐一对照来进行图像匹配的话就如上图所示，the result is so unreasonable，我们希望...","permalink":"/post/卷积神经网络CNN","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"深度学习","slug":"深度学习","count":3,"path":"api/categories/深度学习.json"}],"tags":[{"name":"深度学习","slug":"深度学习","count":1,"path":"api/tags/深度学习.json"}],"author":{"name":"nly","slug":"blog-author","avatar":"","link":"/","description":"收集者","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}